const axios = require('axios'); 

Imports axios library and assigns in to constant axios 

axios - HTTP client for Node.js & browser. It is used to make HTTP requests such as GET & POST, to fetch data from a server. In the context of web scraping or API interaction, 'axios' often used to retrieve HTML content/JSON data from web pages or APIs 

HTTP Request Types: 
- GET: Method used to request data from a specified source. Used to retrieve data from a server and do not modify the server state. Data requested appended to the URL as query parameters making it visible in the URL. Get requested can be repeated without causing different outcomes 

- POST: Method used to send data to the server to create or update a resource. Data is included in the body of the request, not in the URL, higher level of security. _POST changes the server's state, repeated requests can result in different outcomes. 


jQuery & Cheerio: 
- jQuery is a fast, small and "feature-rich" JavaScript library designed to simplify HTML DOM tree traversal & manipulation, as well as event handling, CSS animation, and Ajax. Used in the browser to enhance web pages to make them more interactive and dynamic. 
- Cheerio is a server-sided library for Node.js that provides a subset of jQuery's functionalities. Used for parsing & manipulating HTML on the server, for web scraping purposes. Cheerio uses syntax similar to jQuery, making it familiar to devs who have used jQuery in the browser. Unlike jQuery, cheerio does not interact with the Browser's DOM" Instead uses HTMLparser to parse HTML documents on the server. 

HTML versus XML: 
- HTML: Structure web pages & apps, pre-defined tags to format content and is focused on presentation. HTML is not case-sensitive, more "forgiving of errors". 
- XML (Extensible Markup Language): Used to store & transport data. allows devs to define their own tags and is focused on data interchange and structure XML is case-sensitive and requires strict adherence to syntax rules. 

DOM? 
- Document Object Model: programming interface for web documents. Represents the structure for web documents. Represents structure of the document (HTML, XML, etc) as a tree of objects, allowing scripts to access & manipulate the document's content, structure and style. DOM provides methods to traverse and modify the document, enabling dynamic content updates and interactions. 

File System and Standard POSIX Functions? 
- File system referred to system used by OS to manage files on disk. Node.js, 'fs' module provides API for interacting with the file system, allowing one to read, write, and manipulate files & directories. 
- POSIX (Portable Operating System Interface) Functions are standardised OS Interface APIs that define how to interact with the file system, process management and other OS level tasks. Ensures compatibility and portability across different Unix like OS. 

Promises versus Callbacks: 
- Callbacks is a function passed as an argument to another function, executed after the initial function completes, Callback Hell - Nested deeply making code hell to read. 
- Promises: represent eventual completion of an asynchronous operation and resulting value. Provide a more structured way to handle asynchronous operations, Allowing chaining or better error handling. Promises can be either in Pending, fulfilled or rejected. 

What is asynchronous code? 
- Allows programs to perform other tasks while waiting for an operation to complete. Rather than blocking execution, this is crucial for tasks like network requests, where waiting for a response would freeze the application. Asynchronous programming can be achieved using call back promises or async/await in JavaScript allowing for more efficient & responsive apps. 
























const cheerio = require('cheerio'); 






















































Imports Cheerio Library 

Cheerio is a fast, flexible and lean implementation of core jQuery designed specifically for the server. Used for parsing & manipulating HTML and XML in Node.js 

for web scraping, cheerio allows one to load HTML and use jQuery like syntax and manipulate the DOM, easier to extract specific data from web pages 

const fs = require('fs').promises; 

line imports file system module's promise-based API and assigns it to the constant 'fs'.

'fs' module provides an API for interacting with the file system - modelled on standard POSIX functions. By using '.promises' property - accessing promise-based version of the 'fs' module, allows you to perform file operations (such as reading, writing, and deleting files) using promises instead of callbacks. Lead to cleaner and more readable asynchronous code 

